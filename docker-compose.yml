version: '3.8'

services:
  bot:
    image: "${BOT_NAME}_image"
    container_name: "${BOT_NAME}"
    stop_signal: SIGINT
    build:
      context: .
    working_dir: "/usr/src/app/${BOT_NAME}"
    volumes:
      - .:/usr/src/app/${BOT_NAME}
    command: python3 -m bot
    restart: always
    env_file:
      - ".env"

    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

    depends_on:
      - postgres
#      - grafana
      - redis

  postgres:
    container_name: "${BOT_NAME}_postgres"
    image: postgres:14.11-alpine
    ports:
      - "5439:5432"
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql@14/data:rw
    command: "postgres -c max_connections=150
             -c shared_buffers=512MB -c effective_cache_size=1536MB
             -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB
             -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200
             -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2
             -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}

  redis:
    container_name: "${BOT_NAME}_redis"
    image: redis:6.2-alpine
    restart: always
    command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    env_file:
      - ".env"
    volumes:
      - ./cache:/data

#  grafana:
#    image: grafana/grafana
#    container_name: "${BOT_NAME}_grafana"
#    volumes:
#        - grafana-data:/var/lib/grafana
#        - ./grafana.ini:/etc/grafana/grafana.ini
#    environment:
#        - GF_DATE_FORMATS_DEFAULT_TIMEZONE=browser
#    ports:
#        - "3000:3000"
#    env_file:
#      - ".env"
#    depends_on:
#      - postgres

#  dozzle:
#    container_name: "${BOT_NAME}_dozzle"
#    image: amir20/dozzle:latest
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    ports:
#      - 8080:8080

# TODO: Setup NGINX ./nginx/nginx.conf
#  nginx:
#    container_name: "${BOT_NAME}_nginx"
#    stop_signal: SIGINT
#    restart: always
#    image: nginx:latest
#    ports:
#      - '80:80'
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf


volumes:
  pgdata: { }
  cache: { }
#  grafana-data: { }
